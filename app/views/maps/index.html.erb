<style type="text/css">
  html, body {
    height: 100%;
    margin: 0;
    overflow: hidden;
    font-family: "Roboto", "Helvetica", "Arial", sans-serif;
  }

  #map {
    height: 100%;
    width: 100%;
    position: relative;
  }

  #actions {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
    background-color: white;
    padding: 16px;
    box-shadow: 0px 3px 5px -1px rgba(0,0,0,0.2),
                0px 6px 10px 0px rgba(0,0,0,0.14),
                0px 1px 18px 0px rgba(0,0,0,0.12);
    border-radius: 8px;
    width: 300px;
  }

  .mui-button {
    margin: 5px 0;
    display: block;
    width: 100%;
  }

  .mui-input-container {
    display: flex;
    align-items: center;
    margin: 10px 0;
  }

  .mui-input-container label {
    margin-right: 10px;
    font-size: 14px;
  }

  .mui-input-container input {
    flex-grow: 1;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
  }

  #pin-placement-overlay {
    font-family: "Roboto", "Helvetica", "Arial", sans-serif;
  }

  .mui-overlay-card {
    background-color: white;
    padding: 15px;
    border-radius: 5px;
    box-shadow: 0px 3px 5px -1px rgba(0,0,0,0.2),
                0px 6px 10px 0px rgba(0,0,0,0.14),
                0px 1px 18px 0px rgba(0,0,0,0.12);
    text-align: center;
  }

  .mui-overlay-card h4 {
    margin-top: 0;
    color: rgba(0, 0, 0, 0.87);
  }
</style>

<div id="map"></div>

<div id="actions">
  <div class="mui-input-container">
    <span>How to: click DROP THE PIN first, then adjust the pin size before rendering grids or markers</span>
  </div>
  <div class="mui-input-container">
    <label for="pinRadius">Radius:</label>
    <div style="display: flex; flex-grow: 1; align-items: center;">
      <button id="decreaseRadius" class="" style="width: 30px; height: 34px; display: flex; justify-content: center; align-items: center; border: 1px solid #ccc; border-radius: 4px 0 0 4px; background-color: #f5f5f5; cursor: pointer;">-</button>
      <input type="text" id="pinRadius" name="pinRadius" value="3000" style="height: 16px; flex-grow: 1; padding: 8px; border: 1px solid #ccc; border-radius: 0; border-left: none; border-right: none;"/>
      <button id="increaseRadius" class="" style="width: 30px; height: 34px; display: flex; justify-content: center; align-items: center; border: 1px solid #ccc; border-radius: 0 4px 4px 0; background-color: #f5f5f5; cursor: pointer;">+</button>
    </div>
  </div>

  <button id="dropPin" class="mui-button" style="display: flex; align-items: center; justify-content: center;">
    <span class="material-icons" style="margin-right: 5px;">add_location</span> Drop the pin
  </button>

  <div style="margin: 15px 0; height: 1px; background-color: #e0e0e0;"></div>

  <button id="displayMarkerClusters" class="mui-button" style="display: flex; align-items: center; justify-content: center;">
    <span class="material-icons" style="margin-right: 5px;">layers</span> Display Marker Clusters
  </button>

  <button id="displayMarkers" class="mui-button" style="display: flex; align-items: center; justify-content: center;">
    <span class="material-icons" style="margin-right: 5px;">place</span> Display Markers
  </button>

  <button id="clearMarkers" class="mui-button" style="display: flex; align-items: center; justify-content: center;">
    <span class="material-icons" style="margin-right: 5px;">clear</span> Clear all Markers
  </button>

  <button id="displayGrids" class="mui-button" style="display: flex; align-items: center; justify-content: center;">
    <span class="material-icons" style="margin-right: 5px;">grid_on</span> Display Grids
  </button>
</div>

<div id="pin-placement-overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.2); z-index: 1001; pointer-events: none;">
  <div class="mui-overlay-card" style="position: absolute; top: 20px; left: 50%; transform: translateX(-50%);">
    <h4>Click on the map to place your pin</h4>
    <button id="cancel-pin-placement" class="mui-button" style="display: block; margin: 10px auto; padding: 5px 10px;">Cancel</button>
  </div>
</div>

<script>
  function debouncePromise(func, wait) {
    let timeout;
    return function(...args) {
      const context = this;
      return new Promise((resolve) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => {
          const result = func.apply(context, args);
          if (result instanceof Promise) {
            result.then(resolve);
          } else {
            resolve(result);
          }
        }, wait);
      });
    };
  }

  function markerDOM(id, name, address, primary_categories, latitude, longitude) {
    return `
      <div>
        <p>id:${id}</p>
        <p><b>${name}</b></p>
        <p><b>${address}</b></p>
        <p style="text-wrap: wrap;"><b>${primary_categories}</b></p>
        <p><b>${latitude},${longitude}</b> <a href="https://www.google.com/maps/@${latitude},${longitude},16.51z" target="_blank" rel="noopener noreferrer">Open Google map</a></p>
      </div>
    `
  }
</script>

<script>
  const STARTING_POINT = {
    SYDNEY_ANDERSON_STUART_BUILDING: [-33.887117, 151.189334],
    CENTER_OF_MANCHESTER: [53.48012918863774, -2.2673463821411137],
    TORONTO_LAKEVIEW: [43.5852081, -79.5613104],
  }

  const map = L.map("map").setView(STARTING_POINT.SYDNEY_ANDERSON_STUART_BUILDING, 13);

  let $mapMarkers = [];
  const markerClusters = L.markerClusterGroup();
  let markers = [];
  const addedMarkerIds = new Set();
  let gridLayers = [];
  const addedGridLayers = new Set();
  let pinMarker = null;
  let radiusCircle = null;
  let isPinPlacementMode = false;
  let pinRadius = 3000; // Variable to store the pinRadius value
  let pinLat = null;
  let pinLng = null;

  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    minZoom: 4,
    maxZoom: 17,
  }).addTo(map);

  function loadPlaces() {
    const params = new URLSearchParams({
      center_lat: pinLat,
      center_lng: pinLng,
      radius: pinRadius
    });

    return fetch(`/places?${params}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json"
      }
    })
    .then(response => response.json())
    .then(data => {
      // Create a new marker cluster group
      $mapMarkers = data;
      return data;
    })
    .catch(error => {
      console.error("Error loading places:", error)
      return [];
    });
  };

  const debouncedLoadPlaces = debouncePromise(loadPlaces, 1000);

  function loadGrids() {
    const params = new URLSearchParams({
      center_lat: pinLat,
      center_lng: pinLng,
      radius: pinRadius
    });

    fetch(`/search_grids?${params}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json"
      }
    })
    .then(response => response.json())
    .then(data => {
      // Create a new marker cluster group
      showGrids(data);
    })
    .catch(error => console.error("Error loading places:", error));
  };

  function showMarkerClusters() {
    $mapMarkers.forEach(place => {
      const { id, latitude, longitude, name, addresses, primary_categories } = place;
      const mainAddress = [addresses[0]['freeform'], addresses[0]['postcode'], addresses[0]['region']].join(', ');

      const markerId = `${latitude},${longitude}`; // prevent dup
      if (!addedMarkerIds.has(markerId)) {
        const marker = L.marker([latitude, longitude])
                        .bindPopup(markerDOM(id, name, mainAddress, primary_categories, latitude, longitude));
        markerClusters.addLayer(marker);
        addedMarkerIds.add(markerId);
      };
    });

    map.addLayer(markerClusters);
  }

  function showMarkers() {
    $mapMarkers.forEach(place => {
      const { id, latitude, longitude, name, addresses, primary_categories } = place;
      const mainAddress = [addresses[0]['freeform'], addresses[0]['postcode'], addresses[0]['region']].join(', ');

      const markerId = `${latitude},${longitude}`; // prevent dup
      if (!addedMarkerIds.has(markerId)) {
        const marker = L.marker([latitude, longitude])
          .bindPopup(markerDOM(id, name, mainAddress, primary_categories, latitude, longitude));

        marker.addTo(map);
        markers.push(marker);
        addedMarkerIds.add(markerId);
      };
    });
  }

  function showGrids(grids) {
    // Loop through the grids and create a rectangle for each grid
    grids.forEach(grid => {
      if (!addedGridLayers.has(grid.id)) {
        const bounds = [
          [grid.sw_lat, grid.sw_lng],
          [grid.ne_lat, grid.ne_lng]
        ];

        const rectangle = L.rectangle(bounds, {
          color: grid.hex_color || "#3388ff",
          weight: 2,
        });

        rectangle.bindPopup(`
          <div style="opacity: 0.88; word-wrap: break-word;">
            <b>Grid ID:</b> ${grid.id}<br>
            <b>Radius:</b> ${grid.radius} meters<br>
            <b>Place Types:</b>${grid.place_types || 'N/A'}</span><br>
            <b>Place Count:</b> ${grid.place_results}<br>
            <b>Postcode:</b> ${grid.postcode}<br>
          </div>
        `);

        rectangle.addTo(map);

        gridLayers.push(rectangle);
        addedGridLayers.add(grid.id);
      }
    });
  }

  function clearAllMarkers() {
    markerClusters.clearLayers();
    markers.forEach(marker => map.removeLayer(marker));
    addedMarkerIds.clear();
    gridLayers = [];
    addedGridLayers.clear();

    // Also clear the pin and circle
    if (pinMarker) {
      map.removeLayer(pinMarker);
      pinMarker = null;
    }
    if (radiusCircle) {
      map.removeLayer(radiusCircle);
      radiusCircle = null;
    }
  }

  function enablePinPlacementMode() {
    isPinPlacementMode = true;

    // Update the grid radius from the input field
    pinRadius = parseInt(document.getElementById('pinRadius').value, 10) || 3000;

    // Show the overlay
    document.getElementById('pin-placement-overlay').style.display = 'block';
    // Change pointer-events to 'none' so clicks pass through to the map
    document.getElementById('pin-placement-overlay').style.pointerEvents = 'none';

    // Make sure the cancel button is still clickable
    document.getElementById('cancel-pin-placement').style.pointerEvents = 'auto';

    // Disable all buttons except "Cancel"
    const buttons = document.querySelectorAll('#actions button');
    buttons.forEach(button => {
      if (button.id !== 'cancel-pin-placement') {
        button.disabled = true;
      }
    });

    // Set the cursor to crosshair to indicate placement mode
    document.getElementById('map').style.cursor = 'crosshair';

    // Add temporary click event listener to map
    map.once('click', function(e) {
      createPinAtLocation(e.latlng.lat, e.latlng.lng);
      disablePinPlacementMode();
    });
  }

  function disablePinPlacementMode() {
    isPinPlacementMode = false;

    // Hide the overlay
    document.getElementById('pin-placement-overlay').style.display = 'none';
    document.getElementById('pin-placement-overlay').style.pointerEvents = 'none';

    // Re-enable all buttons
    const buttons = document.querySelectorAll('#actions button');
    buttons.forEach(button => {
      button.disabled = false;
    });

    // Reset cursor
    document.getElementById('map').style.cursor = '';
  }

  function createPinAtLocation(lat, lng) {
    // Remove existing pin and circle if any
    if (pinMarker) {
      map.removeLayer(pinMarker);
    }
    if (radiusCircle) {
      map.removeLayer(radiusCircle);
    }

    // Create a new pin marker
    pinMarker = L.marker([lat, lng], { draggable: true })
      .bindPopup(`
        <div>
          <p><b>Center Point</b></p>
          <p><b>${lat}, ${lng}</b></p>
          <p><b>Radius: ${pinRadius} meters</b></p>
        </div>
      `)
      .addTo(map);

    updatePinPopup();

    // Create a circle with 20% opacity
    radiusCircle = L.circle([lat, lng], {
      radius: pinRadius,
      color: '#3388ff',
      fillColor: '#3388ff',
      fillOpacity: 0.2,
      weight: 2,
      dashArray: '5, 10'  // Creates dotted line
    }).addTo(map);

    // Add drag event handlers
    pinMarker.on('drag', updateCirclePosition);
    pinMarker.on('dragend', updatePinPopup);
  }

  function updateCirclePosition(e) {
    const marker = e.target;
    const position = marker.getLatLng();

    // Move the circle to match the marker's position
    if (radiusCircle) {
      radiusCircle.setLatLng(position);
    }
  }

  function updatePinPopup() {
    if (pinMarker) {
      const position = pinMarker.getLatLng();
      pinLat = position.lat;
      pinLng = position.lng;

      pinMarker.bindPopup(`
        <div>
          <p><b>Center Point</b></p>
          <p><b>${position.lat.toFixed(8)}, ${position.lng.toFixed(8)}</b></p>
          <p><b>Radius: ${pinRadius} meters</b></p>
        </div>
      `);
    }
  }

  function updateRadiusCircle() {
    if (pinMarker && radiusCircle) {
      // Get the current radius value
      const newRadius = parseInt(document.getElementById('pinRadius').value, 10) || 3000;

      // Remove the existing circle
      map.removeLayer(radiusCircle);

      // Get the current pin position
      const latLng = pinMarker.getLatLng();

      // Create a new circle with the updated radius
      radiusCircle = L.circle(latLng, {
        radius: newRadius,
        color: '#3388ff',
        fillColor: '#3388ff',
        fillOpacity: 0.2,
        weight: 2,
        dashArray: '5, 10'  // Creates dotted line
      }).addTo(map);

      // Update the popup content to show the new radius
      updatePinPopup();
    }
  }

<%#   map.on('moveend', debouncedLoadPlaces);
  map.on('zoomend', debouncedLoadPlaces); %>

  window.addEventListener('load', function() {
    debouncedLoadPlaces();
    // Initialize pinRadius from the input value on page load
    pinRadius = parseInt(document.getElementById('pinRadius').value, 10) || 3000;
  })

  document.getElementById('displayMarkers').addEventListener('click', function() {
    debouncedLoadPlaces().then(() => {
      showMarkers();
    });
  });

  document.getElementById('displayMarkerClusters').addEventListener('click', function() {
    debouncedLoadPlaces().then(() => {
      showMarkerClusters();
    });
  });

  document.getElementById('displayGrids').addEventListener('click', function() {
    loadGrids();
  });

  document.getElementById('clearMarkers').addEventListener('click', function() {
    clearAllMarkers();
  });

  document.getElementById('dropPin').addEventListener('click', function() {
    enablePinPlacementMode();
  });

  document.getElementById('cancel-pin-placement').addEventListener('click', function(e) {
    e.stopPropagation();
    disablePinPlacementMode();
  });

  // Update pinRadius when the input value changes
  document.getElementById('pinRadius').addEventListener('input', function() {
    pinRadius = parseInt(this.value, 10) || 3000;
    updateRadiusCircle();
  });

  document.getElementById('increaseRadius').addEventListener('click', function() {
    const radiusInput = document.getElementById('pinRadius');
    const currentValue = parseInt(radiusInput.value, 10) || 3000;
    radiusInput.value = currentValue + 1000;

    // Trigger the input event to update the radius
    const inputEvent = new Event('input');
    radiusInput.dispatchEvent(inputEvent);
  });

  document.getElementById('decreaseRadius').addEventListener('click', function() {
    const radiusInput = document.getElementById('pinRadius');
    const currentValue = parseInt(radiusInput.value, 10) || 3000;
    const newValue = Math.max(1000, currentValue - 1000); // Prevent going below 1000
    radiusInput.value = newValue;

    // Trigger the input event to update the radius
    const inputEvent = new Event('input');
    radiusInput.dispatchEvent(inputEvent);
  });
</script>
